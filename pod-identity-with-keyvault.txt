#Suivre les étapes suivantes pour créer un pod identity
# https://docs.microsoft.com/fr-fr/azure/aks/use-azure-ad-pod-identity

$Sefixe= "demold01"
$subscriptionId = (az account show | ConvertFrom-Json).id
$tenantId = (az account show | ConvertFrom-Json).tenantId
$location = "westeurope"
$resourceGroupName = "rg-demo08"
$aksName = "aks-demo08"
$keyVaultName = "keyvault-demo08"
$secretProviderClassName = "secret-provider-kv"

$POD_IDENTITY_NAME= "my-pod-identity"
$IDENTITY_RESOURCE_GROUP= "rg-" + $Sefixe

$SUBSCRIPTION_ID="7b8ab5b5-0b57-470b-b81b-36f3d35c159a"
$IDENTITY_CLIENT_ID="1fc96452-b367-4797-a0b2-f75a54e94938"

# echo "Creating Resource Group..."
  $rg = az group create -n $resourceGroupName -l $location | ConvertFrom-Json

# echo "Creating AKS cluster..." # doesn't work with AKS with Managed Identity!
  $aks = az aks create -n $aksName -g $resourceGroupName --enable-managed-identity --kubernetes-version 1.21.7 --node-count 1 | ConvertFrom-Json

$aks = (az aks show -n $aksName -g $resourceGroupName | ConvertFrom-Json) # retrieve existing AKS

az aks get-credentials -n $aksName -g $resourceGroupName


echo "Creating Key Vault..."
$keyVault = az keyvault create -n $keyVaultName -g $resourceGroupName -l $location --enable-soft-delete true --retention-days 7 | ConvertFrom-Json
# $keyVault = (az keyvault show -n $keyVaultName | ConvertFrom-Json) # retrieve existing KV

echo "Creating Secrets in Key Vault..."
az keyvault secret set --name $secret1Name --value "Houssem" --vault-name $keyVaultName
az keyvault secret set --name $secret2Name --value "P@ssword123456" --vault-name $keyVaultName


---Créer un csi

$secretProviderKV = @"
apiVersion: secrets-store.csi.x-k8s.io/v1alpha1
kind: SecretProviderClass
metadata:
  name: $($secretProviderClassName)
  namespace: my-app
spec:
  provider: azure
  parameters:
    usePodIdentity: "true"
    useVMManagedIdentity: "false"
    userAssignedIdentityID: ""
    keyvaultName: $keyVaultName
    cloudName: AzurePublicCloud
    objects:  |
      array:
        - |
          objectAlias: SQL_PASSWORD
          objectName: SQLPASSWORD
          objectType: secret        # object types: secret, key or cert
          objectVersion: ""         # [OPTIONAL] object versions, default to latest if empty
        - |
          objectAlias: SQL_USER
          objectName: SQLUSER
          objectType: secret
          objectVersion: ""
    resourceGroup: $groupeName
    subscriptionId: $subscriptionId
    tenantId: $tenantId         # The tenant ID of the Azure Key Vault instance   
  secretObjects:
    - secretName: sql-password-secret
      data:
      - key: password
        objectName: SQL_PASSWORD
      type: Opaque
    - secretName: sql-user-secret
      data:
      - key: user
        objectName: SQL_USER
      type: Opaque      
    
"@
$secretProviderKV | kubectl create -f -

---Exécuter le pod POI

$podTest = @"
apiVersion: v1
kind: Pod
metadata:
  name: poi
  labels:
    aadpodidbinding: $POD_IDENTITY_NAME
	tier: poi
  namespace: my-app
spec:
  containers:
  - name: poi
    image: registrygzx5650.azurecr.io/poi:1.0 
    args:
      - --subscriptionid=$SUBSCRIPTION_ID
      - --clientid=$IDENTITY_CLIENT_ID
      - --resourcegroup=$IDENTITY_RESOURCE_GROUP    
    env:        
      - name: SQL_SERVER
        value: sqlservergzx5650.database.windows.net
      - name: SQL_USER
        valueFrom:
            secretKeyRef:
              name: sql-user-secret
              key: user
      - name: SQL_PASSWORD
        valueFrom:
            secretKeyRef:
              name: sql-password-secret
              key: password
    volumeMounts:
    - name: vm-secrets-hacker05
      mountPath: "/mnt/secrets-store"
      readOnly: true
  volumes:
  - name: vm-secrets-hacker05
    csi:
      driver: secrets-store.csi.k8s.io
      readOnly: true
      volumeAttributes:
        secretProviderClass: "secret-provider-kv"
"@
$podTest | kubectl create -f -


 kubectl exec -it poi -n my-app ls /mnt/secrets-store
 kubectl exec -it poi -n my-app cat /mnt/secrets-store/SQL_USER
  kubectl exec -it poi -n my-app cat /mnt/secrets-store/SQL_PASSWORD
